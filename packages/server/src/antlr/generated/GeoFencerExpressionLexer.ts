// Generated from src/antlr/GeoFencerExpression.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class GeoFencerExpressionLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly AND = 4;
	public static readonly OR = 5;
	public static readonly NOT = 6;
	public static readonly TRUE = 7;
	public static readonly FALSE = 8;
	public static readonly GT = 9;
	public static readonly GE = 10;
	public static readonly LT = 11;
	public static readonly LE = 12;
	public static readonly EQ = 13;
	public static readonly LIKE = 14;
	public static readonly LPAREN = 15;
	public static readonly RPAREN = 16;
	public static readonly DECIMAL = 17;
	public static readonly IDENTIFIER = 18;
	public static readonly STRING = 19;
	public static readonly WS = 20;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "AND", "OR", "NOT", "TRUE", "FALSE", "GT", "GE", 
		"LT", "LE", "EQ", "LIKE", "LPAREN", "RPAREN", "DECIMAL", "IDENTIFIER", 
		"STRING", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'['", "','", "']'", "'AND'", "'OR'", "'NOT'", "'TRUE'", "'FALSE'", 
		"'>'", "'>='", "'<'", "'<='", "'='", "'LIKE'", "'('", "')'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "AND", "OR", "NOT", "TRUE", 
		"FALSE", "GT", "GE", "LT", "LE", "EQ", "LIKE", "LPAREN", "RPAREN", "DECIMAL", 
		"IDENTIFIER", "STRING", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(GeoFencerExpressionLexer._LITERAL_NAMES, GeoFencerExpressionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return GeoFencerExpressionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(GeoFencerExpressionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "GeoFencerExpression.g4"; }

	// @Override
	public get ruleNames(): string[] { return GeoFencerExpressionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return GeoFencerExpressionLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return GeoFencerExpressionLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return GeoFencerExpressionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x16\x83\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x03\x02\x03\x03" +
		"\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06" +
		"\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03" +
		"\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x05\x12^\n\x12\x03" +
		"\x12\x06\x12a\n\x12\r\x12\x0E\x12b\x03\x12\x03\x12\x06\x12g\n\x12\r\x12" +
		"\x0E\x12h\x05\x12k\n\x12\x03\x13\x03\x13\x07\x13o\n\x13\f\x13\x0E\x13" +
		"r\v\x13\x03\x14\x03\x14\x07\x14v\n\x14\f\x14\x0E\x14y\v\x14\x03\x14\x03" +
		"\x14\x03\x15\x06\x15~\n\x15\r\x15\x0E\x15\x7F\x03\x15\x03\x15\x03w\x02" +
		"\x02\x16\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02" +
		"\x16\x03\x02\x07\x03\x022;\x05\x02C\\aac|\x06\x022;C\\aac|\x02\x02\x05" +
		"\x02\v\f\x0E\x0F\"\"\x02\x89\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x03+\x03" +
		"\x02\x02\x02\x05-\x03\x02\x02\x02\x07/\x03\x02\x02\x02\t1\x03\x02\x02" +
		"\x02\v5\x03\x02\x02\x02\r8\x03\x02\x02\x02\x0F<\x03\x02\x02\x02\x11A\x03" +
		"\x02\x02\x02\x13G\x03\x02\x02\x02\x15I\x03\x02\x02\x02\x17L\x03\x02\x02" +
		"\x02\x19N\x03\x02\x02\x02\x1BQ\x03\x02\x02\x02\x1DS\x03\x02\x02\x02\x1F" +
		"X\x03\x02\x02\x02!Z\x03\x02\x02\x02#]\x03\x02\x02\x02%l\x03\x02\x02\x02" +
		"\'s\x03\x02\x02\x02)}\x03\x02\x02\x02+,\x07]\x02\x02,\x04\x03\x02\x02" +
		"\x02-.\x07.\x02\x02.\x06\x03\x02\x02\x02/0\x07_\x02\x020\b\x03\x02\x02" +
		"\x0212\x07C\x02\x0223\x07P\x02\x0234\x07F\x02\x024\n\x03\x02\x02\x025" +
		"6\x07Q\x02\x0267\x07T\x02\x027\f\x03\x02\x02\x0289\x07P\x02\x029:\x07" +
		"Q\x02\x02:;\x07V\x02\x02;\x0E\x03\x02\x02\x02<=\x07V\x02\x02=>\x07T\x02" +
		"\x02>?\x07W\x02\x02?@\x07G\x02\x02@\x10\x03\x02\x02\x02AB\x07H\x02\x02" +
		"BC\x07C\x02\x02CD\x07N\x02\x02DE\x07U\x02\x02EF\x07G\x02\x02F\x12\x03" +
		"\x02\x02\x02GH\x07@\x02\x02H\x14\x03\x02\x02\x02IJ\x07@\x02\x02JK\x07" +
		"?\x02\x02K\x16\x03\x02\x02\x02LM\x07>\x02\x02M\x18\x03\x02\x02\x02NO\x07" +
		">\x02\x02OP\x07?\x02\x02P\x1A\x03\x02\x02\x02QR\x07?\x02\x02R\x1C\x03" +
		"\x02\x02\x02ST\x07N\x02\x02TU\x07K\x02\x02UV\x07M\x02\x02VW\x07G\x02\x02" +
		"W\x1E\x03\x02\x02\x02XY\x07*\x02\x02Y \x03\x02\x02\x02Z[\x07+\x02\x02" +
		"[\"\x03\x02\x02\x02\\^\x07/\x02\x02]\\\x03\x02\x02\x02]^\x03\x02\x02\x02" +
		"^`\x03\x02\x02\x02_a\t\x02\x02\x02`_\x03\x02\x02\x02ab\x03\x02\x02\x02" +
		"b`\x03\x02\x02\x02bc\x03\x02\x02\x02cj\x03\x02\x02\x02df\x070\x02\x02" +
		"eg\t\x02\x02\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02" +
		"hi\x03\x02\x02\x02ik\x03\x02\x02\x02jd\x03\x02\x02\x02jk\x03\x02\x02\x02" +
		"k$\x03\x02\x02\x02lp\t\x03\x02\x02mo\t\x04\x02\x02nm\x03\x02\x02\x02o" +
		"r\x03\x02\x02\x02pn\x03\x02\x02\x02pq\x03\x02\x02\x02q&\x03\x02\x02\x02" +
		"rp\x03\x02\x02\x02sw\x07)\x02\x02tv\n\x05\x02\x02ut\x03\x02\x02\x02vy" +
		"\x03\x02\x02\x02wx\x03\x02\x02\x02wu\x03\x02\x02\x02xz\x03\x02\x02\x02" +
		"yw\x03\x02\x02\x02z{\x07)\x02\x02{(\x03\x02\x02\x02|~\t\x06\x02\x02}|" +
		"\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F\x80\x03" +
		"\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x82\b\x15\x02\x02\x82*\x03\x02" +
		"\x02\x02\n\x02]bhjpw\x7F\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GeoFencerExpressionLexer.__ATN) {
			GeoFencerExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(GeoFencerExpressionLexer._serializedATN));
		}

		return GeoFencerExpressionLexer.__ATN;
	}

}

