// Generated from src/antlr/GeoFencerExpression.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class GeoFencerExpressionLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly AND = 3;
	public static readonly OR = 4;
	public static readonly NOT = 5;
	public static readonly TRUE = 6;
	public static readonly FALSE = 7;
	public static readonly GT = 8;
	public static readonly GE = 9;
	public static readonly LT = 10;
	public static readonly LE = 11;
	public static readonly EQ = 12;
	public static readonly LIKE = 13;
	public static readonly IN = 14;
	public static readonly LPAREN = 15;
	public static readonly RPAREN = 16;
	public static readonly PROP_START = 17;
	public static readonly PROP_END = 18;
	public static readonly DECIMAL = 19;
	public static readonly IDENTIFIER = 20;
	public static readonly TEXTFIELD = 21;
	public static readonly WS = 22;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "AND", "OR", "NOT", "TRUE", "FALSE", "GT", "GE", "LT", 
		"LE", "EQ", "LIKE", "IN", "LPAREN", "RPAREN", "PROP_START", "PROP_END", 
		"DECIMAL", "IDENTIFIER", "TEXTFIELD", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'['", "','", "'AND'", "'OR'", "'NOT'", "'TRUE'", "'FALSE'", 
		"'>'", "'>='", "'<'", "'<='", "'='", "'LIKE'", "'IN'", "'('", "')'", "'PROP['", 
		"']'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "AND", "OR", "NOT", "TRUE", "FALSE", 
		"GT", "GE", "LT", "LE", "EQ", "LIKE", "IN", "LPAREN", "RPAREN", "PROP_START", 
		"PROP_END", "DECIMAL", "IDENTIFIER", "TEXTFIELD", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(GeoFencerExpressionLexer._LITERAL_NAMES, GeoFencerExpressionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return GeoFencerExpressionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(GeoFencerExpressionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "GeoFencerExpression.g4"; }

	// @Override
	public get ruleNames(): string[] { return GeoFencerExpressionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return GeoFencerExpressionLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return GeoFencerExpressionLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return GeoFencerExpressionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x18\x90\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
		"\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13" +
		"\x03\x14\x05\x14k\n\x14\x03\x14\x06\x14n\n\x14\r\x14\x0E\x14o\x03\x14" +
		"\x03\x14\x06\x14t\n\x14\r\x14\x0E\x14u\x05\x14x\n\x14\x03\x15\x03\x15" +
		"\x07\x15|\n\x15\f\x15\x0E\x15\x7F\v\x15\x03\x16\x03\x16\x07\x16\x83\n" +
		"\x16\f\x16\x0E\x16\x86\v\x16\x03\x16\x03\x16\x03\x17\x06\x17\x8B\n\x17" +
		"\r\x17\x0E\x17\x8C\x03\x17\x03\x17\x02\x02\x02\x18\x03\x02\x03\x05\x02" +
		"\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02" +
		"\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11" +
		"!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18\x03\x02" +
		"\x07\x03\x022;\x05\x02C\\aac|\x06\x022;C\\aac|\x03\x02))\x05\x02\v\f\x0E" +
		"\x0F\"\"\x02\x96\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x03/\x03\x02\x02\x02\x051\x03\x02\x02\x02\x073\x03\x02" +
		"\x02\x02\t7\x03\x02\x02\x02\v:\x03\x02\x02\x02\r>\x03\x02\x02\x02\x0F" +
		"C\x03\x02\x02\x02\x11I\x03\x02\x02\x02\x13K\x03\x02\x02\x02\x15N\x03\x02" +
		"\x02\x02\x17P\x03\x02\x02\x02\x19S\x03\x02\x02\x02\x1BU\x03\x02\x02\x02" +
		"\x1DZ\x03\x02\x02\x02\x1F]\x03\x02\x02\x02!_\x03\x02\x02\x02#a\x03\x02" +
		"\x02\x02%g\x03\x02\x02\x02\'j\x03\x02\x02\x02)y\x03\x02\x02\x02+\x80\x03" +
		"\x02\x02\x02-\x8A\x03\x02\x02\x02/0\x07]\x02\x020\x04\x03\x02\x02\x02" +
		"12\x07.\x02\x022\x06\x03\x02\x02\x0234\x07C\x02\x0245\x07P\x02\x0256\x07" +
		"F\x02\x026\b\x03\x02\x02\x0278\x07Q\x02\x0289\x07T\x02\x029\n\x03\x02" +
		"\x02\x02:;\x07P\x02\x02;<\x07Q\x02\x02<=\x07V\x02\x02=\f\x03\x02\x02\x02" +
		">?\x07V\x02\x02?@\x07T\x02\x02@A\x07W\x02\x02AB\x07G\x02\x02B\x0E\x03" +
		"\x02\x02\x02CD\x07H\x02\x02DE\x07C\x02\x02EF\x07N\x02\x02FG\x07U\x02\x02" +
		"GH\x07G\x02\x02H\x10\x03\x02\x02\x02IJ\x07@\x02\x02J\x12\x03\x02\x02\x02" +
		"KL\x07@\x02\x02LM\x07?\x02\x02M\x14\x03\x02\x02\x02NO\x07>\x02\x02O\x16" +
		"\x03\x02\x02\x02PQ\x07>\x02\x02QR\x07?\x02\x02R\x18\x03\x02\x02\x02ST" +
		"\x07?\x02\x02T\x1A\x03\x02\x02\x02UV\x07N\x02\x02VW\x07K\x02\x02WX\x07" +
		"M\x02\x02XY\x07G\x02\x02Y\x1C\x03\x02\x02\x02Z[\x07K\x02\x02[\\\x07P\x02" +
		"\x02\\\x1E\x03\x02\x02\x02]^\x07*\x02\x02^ \x03\x02\x02\x02_`\x07+\x02" +
		"\x02`\"\x03\x02\x02\x02ab\x07R\x02\x02bc\x07T\x02\x02cd\x07Q\x02\x02d" +
		"e\x07R\x02\x02ef\x07]\x02\x02f$\x03\x02\x02\x02gh\x07_\x02\x02h&\x03\x02" +
		"\x02\x02ik\x07/\x02\x02ji\x03\x02\x02\x02jk\x03\x02\x02\x02km\x03\x02" +
		"\x02\x02ln\t\x02\x02\x02ml\x03\x02\x02\x02no\x03\x02\x02\x02om\x03\x02" +
		"\x02\x02op\x03\x02\x02\x02pw\x03\x02\x02\x02qs\x070\x02\x02rt\t\x02\x02" +
		"\x02sr\x03\x02\x02\x02tu\x03\x02\x02\x02us\x03\x02\x02\x02uv\x03\x02\x02" +
		"\x02vx\x03\x02\x02\x02wq\x03\x02\x02\x02wx\x03\x02\x02\x02x(\x03\x02\x02" +
		"\x02y}\t\x03\x02\x02z|\t\x04\x02\x02{z\x03\x02\x02\x02|\x7F\x03\x02\x02" +
		"\x02}{\x03\x02\x02\x02}~\x03\x02\x02\x02~*\x03\x02\x02\x02\x7F}\x03\x02" +
		"\x02\x02\x80\x84\x07)\x02\x02\x81\x83\n\x05\x02\x02\x82\x81\x03\x02\x02" +
		"\x02\x83\x86\x03\x02\x02\x02\x84\x82\x03\x02\x02\x02\x84\x85\x03\x02\x02" +
		"\x02\x85\x87\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02\x87\x88\x07)\x02" +
		"\x02\x88,\x03\x02\x02\x02\x89\x8B\t\x06\x02\x02\x8A\x89\x03\x02\x02\x02" +
		"\x8B\x8C\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02" +
		"\x8D\x8E\x03\x02\x02\x02\x8E\x8F\b\x17\x02\x02\x8F.\x03\x02\x02\x02\n" +
		"\x02jouw}\x84\x8C\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GeoFencerExpressionLexer.__ATN) {
			GeoFencerExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(GeoFencerExpressionLexer._serializedATN));
		}

		return GeoFencerExpressionLexer.__ATN;
	}

}

